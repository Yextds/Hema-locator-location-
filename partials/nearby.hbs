<div class="py-5">
  <div class="container mx-auto">
    <h2
      class="text-3xl text-center text-dark_grey font-semibold leading-tight after:content-[''] after:w-16 after:h-1 after:bg-black after:block after:mx-auto after:mt-2.5">
      {{c_title_lists.[4]}}
    </h2>
    <div class="location-data flex flex-wrap"></div>
  </div>
</div>
<script>
  function convertDays(days) {
    const currentDate = new Date();
    const dayNumber = currentDate.getDay();
    const currentSelectedDay = days[dayNumber];
    const beforeSelected = days.slice(0, dayNumber);
    const afterSelected = days.slice(dayNumber, days.length);
    beforeSelected.forEach((element) => {
      afterSelected.push(element);
    });
    return {
      afterSelected: afterSelected
    };
  }


  
  let days_string = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
  let path = window.location.href;

  if (path.includes("/fr")) {
days_string = ['dimanche', 'lundi', 'mardi', 'mercredi', 'jeudi',  'vendredi', 'samedi'];
  }
   if (path.includes("/fr_CA")) {
days_string = ['dimanche', 'lundi', 'mardi', 'mercredi', 'jeudi',  'vendredi', 'samedi'];
  }
  if(path.includes("/es")){
  days_string=['Domingo','Lunes','Martes','Miércoles','Jueves','Viernes','Sábado'];
  }
    if(path.includes("/it")){
  days_string=['domenica','lunedì','martedì','mercoledì','giovedì','venerdì','sabato'];
  }
    if(path.includes("/pt")){
  days_string=['domingo','segunda-feira','terça-feira','quarta-feira','quinta-feira','sexta-feira','sábado'];
  }
    if(path.includes("/de")){
  days_string=['Sonntag','Montag','Dienstag','Mittwoch','Donnerstag','Freitag','Samstag'];
  }
    if(path.includes("/nl")){
  days_string=['zondag','maandag','dinsdag','woensdag','donderdag','vrijdag','zaterdag'];
  }
    if(path.includes("/en")){
  days_string=['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
  }


  $('.time-row').each(function () {

    var day = $(this).attr('data-day');
    var timeStart = $(this).attr('data-start');
    var timeEnd = $(this).attr('data-end');

    var today = new Date();
    var dayName = days_string[today.getDay()];


    // $(this).find('.time_start').html(formatTimE(timeStart));
    // $(this).find('.time_end').html(formatTimE(timeEnd));

    if (day) {
      if (dayName == day) {
        $(this).addClass('currentDay');
        $(this).clone().prependTo(".hours-list");
        $(this).remove();
      }
    } else {

      if (dayName == day) {
        $(this).addClass('currentDay');
        $(this).clone().prependTo(".hours-list");
        $(this).remove();
      }

    }

  });

  const convertedDays = convertDays(days_string);
  const days = convertedDays.afterSelected;
  console.log(days);
  let day_html = '';
  for (let i = 0; i < days.length; i++) {
    let currentDay = '';
    if (i == 0) {
      currentDay = 'currentDay';
    }
    day_html += '<div class=" time-row px-5 flex flex-wrap group odd:bg-color_f5f5f5 ' + currentDay + ' " >'
    day_html += $('.hours-list').find('.' + days[i]).html();
    day_html += '</div>';
  }
  $('.hours-list').html(day_html);
  window.dayName = function (currentDate) {
    return days[currentDate.getDay()];
  };

  //Multi location data

</script>
<script>



  window.dayName = function (currentDate) {
    return days[currentDate.getDay()];
  };
  window.formatDate = function (intervalStamp, addDays) {
    let baseDate = new Date();
    let hours = intervalStamp / 100;
    let minutes = intervalStamp % 100;
    baseDate.setHours(hours);
    baseDate.setMinutes(minutes);
    const options = { hour: '2-digit', minute: '2-digit' };
    if (addDays != undefined) {
      options.weekday = "short";
      baseDate.setDate(baseDate.getDate() + addDays);
    }
    return baseDate.toLocaleTimeString([], options);
  };
  window.getYextTimeWithUtcOffset = function (entityUtcOffsetSeconds) {
    const now = new Date();
    let utcOffset = 0;
    if (entityUtcOffsetSeconds) {
      utcOffset = entityUtcOffsetSeconds * 1000;
    }
    if (utcOffset !== 0) {
      const localUtcOffset = now.getTimezoneOffset() * 60 * 1000;
      return new Date(now.valueOf() + utcOffset + localUtcOffset);
    }
    return now;
  };
  window.parseTimeZoneUtcOffset = function (timeString) {
    if (!timeString) {
      return 0;
    }
    const parts = timeString.split(":");
    const hours = parseInt(parts[0].replace(/\u200E/g, ''), 10);
    const minutes = parseInt(parts[1].replace(/\u200E/g, ''), 10);
    if (hours < 0) {
      return -(Math.abs(hours) + minutes / 60) * 60 * 60;
    }
    return (hours + minutes / 60) * 60 * 60;
  };
  window.dateStringToInt = function (dateString) {
    return parseInt(dateString.replace(":", ""))
  };
  window.getOpenNowString = function (hoursData, utcOffset) {
    if (!hoursData) {
      return ""
    }
    const now = getYextTimeWithUtcOffset(utcOffset);
    const tomorrow = new Date(now.getTime() + 60 * 60 * 24 * 1000);
    const yesterday = new Date(now.getTime() - 60 * 60 * 24 * 1000);
    const nowTimeNumber = now.getHours() + now.getMinutes() / 60;
    function getIntervalOnDate(date) {
      const day = date.getDate();
      const month = date.getMonth() + 1;
      const year = date.getFullYear();
      const days = ["sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday"];
      const dateString = year + '-' + (month < 10 ? '0' + month : month) + '-' + (day < 10 ? '0' + day : day);
      const dayOfWeekString = days[date.getDay()];
      // Check for holiday
      if (hoursData.holidayHours) {
        for (let i = 0; i < hoursData.holidayHours.length; i++) {
          const holiday = hoursData.holidayHours[i];
          if (holiday.date == dateString) {
            if (holiday.openIntervals) {
              return holiday.openIntervals;
            } else if (holiday.isClosed === true) {
              return null; // On holiday but closed
            }
          }
        }
      }
      // Not on holiday
      if (hoursData[dayOfWeekString] && hoursData[dayOfWeekString].openIntervals) {
        return hoursData[dayOfWeekString].openIntervals;
      } else {
        return null;
      }
    }
    function timeStringToNumber(timeString) {
      const parts = timeString.split(":");
      const hours = parseInt(parts[0].replace(/\u200E/g, ''), 10);
      const minutes = parseInt(parts[1].replace(/\u200E/g, ''), 10);
      return hours + minutes / 60;
    }
    function formatTime(time) {
      const tempDate = new Date("January 1, 2020 " + time)
      const localeString = 'en-US';
      const tempTime = tempDate.toLocaleTimeString(localeString.replace('_', '-'), { hour: "numeric", minute: "numeric" });
      return tempTime;
    }
    const intervalsToday = getIntervalOnDate(now);
    const intervalsTomorrow = getIntervalOnDate(tomorrow);
    const intervalsYesterday = getIntervalOnDate(yesterday);
    let openRightNow = false;
    let currentInterval = null;
    let nextInterval = null;
    if (intervalsYesterday) {
      for (let i = 0; i < intervalsYesterday.length; i++) {
        const interval = intervalsYesterday[i];
        const startIntervalNumber = timeStringToNumber(interval.start);
        const endIntervalNumber = timeStringToNumber(interval.end);
        // If end overflows to the next day (i.e. today).
        if (endIntervalNumber < startIntervalNumber) {
          if (nowTimeNumber < endIntervalNumber) {
            currentInterval = interval;
            openRightNow = true;
          }
        }
      }
    }
    // Assumes no overlapping intervals
    if (intervalsToday) {
      for (let i = 0; i < intervalsToday.length; i++) {
        const interval = intervalsToday[i];
        const startIntervalNumber = timeStringToNumber(interval.start);
        const endIntervalNumber = timeStringToNumber(interval.end);
        // If current time doesn't belong to one of yesterdays interval.
        if (currentInterval == null) {
          if (endIntervalNumber < startIntervalNumber) {
            if (nowTimeNumber >= startIntervalNumber) {
              currentInterval = interval;
              openRightNow = true;
            }
          } else if (nowTimeNumber >= startIntervalNumber
            && nowTimeNumber < endIntervalNumber) {
            currentInterval = interval;
            openRightNow = true;
          }
        }
        if (nextInterval == null) {
          if (startIntervalNumber > nowTimeNumber) {
            nextInterval = interval
          }
        } else {
          if (startIntervalNumber > nowTimeNumber
            && startIntervalNumber < timeStringToNumber(nextInterval.start)) {
            nextInterval = interval;
          }
        }
      }
    }
    let nextIsTomorrow = false;
    // If no more intervals in the day
    if (nextInterval == null) {
      if (intervalsTomorrow) {
        if (intervalsTomorrow.length > 0) {
          nextInterval = intervalsTomorrow[0];
          nextIsTomorrow = true;
        }
      }
    }
  let message = 'Closed';
    if (openRightNow) {
      if (currentInterval.start === "00:00" && currentInterval.end === "23:59") {
        message = '{{c_locator_title.[1]}}';
      } else {
        message = ' {{c_locator_title.[2]}}· {{c_locator_title.[3]}} [closingTime]';
        message = message.replace("[closingTime]", formatTime(currentInterval.end));
      }
    } else if (nextInterval) {
      if (nextIsTomorrow) {
        message = '{{c_locator_title.[4]}} ·{{c_locator_title.[0]}}[openingTime] tomorrow';
        message = message.replace("[openingTime]", formatTime(nextInterval.start));
      } else {
        message = ' {{c_locator_title.[0]}} ·{{c_locator_title.[4]}} [openingTime]';
        message = message.replace("[openingTime]", formatTime(nextInterval.start));
      }
    }
    return message;
  };

</script>

<script>

  document.addEventListener("DOMContentLoaded", function () {
    var baseURL = "https://liveapi-sandbox.yext.com/v2/accounts/me/entities/geosearch?";
    var api_key = "{{global.liveApiKey}}";
    var vparam = "20181017";
    var lat = "{{latitude}}";
    var lng = "{{longitude}}";
    var location = lat + "," + lng;
    var limit = 3;
    var radius = 500;
    var savedFilterId = "1042411925";
    var entityTypes =
      "location";
    var fields = "name,hours,slug,neighborhood,address,mainPhone,timeZoneUtcOffset";
    const savedSearchIdString = "";

    var fullURL =
      baseURL +
      "api_key=" +
      api_key +
      "&v=" +
      vparam +
      "&location=" +
      location +
      "&limit=" +
      (limit + 1) +
      "&radius=" +
      radius +
      "&entityTypes=" +
      entityTypes +
      "&savedFilterIds=" +
      savedFilterId +
      "&fields=" +
      fields +
      "&resolvePlaceholders=true";
    [].slice
      .call(document.querySelectorAll(".location-data") || [])
      .forEach(function (el) {
        el.innerHTML = '<div class="col-span-3 text-center text-2xl my-5 opacity-70">Loading...</div>';
      });
    //$.get(fullURL, function (data) {
    fetch(fullURL).then(response => response.json()).then(data => {
      //entities = data.response.entities;
      entities = data.response.entities;
      [].slice
        .call(document.querySelectorAll(".location-data") || [])
        .forEach(function (el) {
          el.innerHTML = "";
        });
      if (
        entities.length == 0 ||
        (entities.length == 1 && entities[0].meta.id == "{{id}}")
      ) {
        [].slice
          .call(document.querySelectorAll(".location-data") || [])
          .forEach(function (el) {
            el.innerHTML = '<div class="col-span-3 text-center text-2xl my-5 opacity-70">No Locations Found</div>';
          });
      }
      for (var i = 1; i < entities.length; i++) {
        location = entities[i];
        locationHTML = "";
        const parsedOffset = parseTimeZoneUtcOffset(location.timeZoneUtcOffset);
        //style="width:80%;height:auto;padding-top:2rem;padding-bottom:2rem;
        //style="width:100%;height:auto;        
        if (true) {
            locationHTML =
              '<div class="location w-full sm:w-1/4 lg:w-1/3 px-5 mt-5 group"><div class="group-odd:bg-black group-odd:bg-opacity-10 bg-orange bg-opacity-10 p-5 h-full rounded-md"><h3 class="name font-semibold text-lg mb-2.5"><a class="inline-block hover:text-white" href="'+location.slug+'"">' +
              location.name +
              '</a></h3><a class="address inline-block hover:underline" href="https://www.google.com/maps/dir/?api=1&origin='+lat+','+lng+'&destination='+location.address.line1+'"><div>' +
              location.address.line1 +
              '</div><div class="address-line-2">' +
              location.address.city + ', ' + location.address.postalCode +
              '</div></a><div class="inline-block w-full"><a class="inline-block mt-2.5 font-bold hover:text-white" href="tel:' + location.mainPhone + '">' + location.mainPhone + '</a></div></div></div>';
          
          //console.log(locationHTML);
          [].slice
            .call(document.querySelectorAll(".location-data") || [])
            .forEach(function (el) {
              el.innerHTML += locationHTML;
            });
        }
      }
    });


    var entityId = '{{id}}';

    var entURL = "https://liveapi-sandbox.yext.com/v2/accounts/me/entities/" + entityId + '?';

    var fullURL =
      entURL +
      "api_key=" +
      api_key +
      "&v=" +
      vparam +
      "&limit=" +
      limit +
      "&entityTypes=" +
      entityTypes;

    fetch(fullURL).then(response => response.json()).then(result => {
      if (!result.errors) {
        var hours = result.response.hours;
        var parsedOffset = parseTimeZoneUtcOffset(result.response.timeZoneUtcOffset);
        var openingCloseTime = window.getOpenNowString(hours, parsedOffset);
        // $('.timeshow').html(openingCloseTime);      
        [].slice
          .call(document.querySelectorAll(".timeshow") || [])
          .forEach(function (el) {
            el.innerHTML = openingCloseTime;
          });
      } else {

      }
    });

  });
</script>